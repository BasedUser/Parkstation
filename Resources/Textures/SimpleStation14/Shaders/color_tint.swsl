light_mode unshaded;

uniform sampler2D SCREEN_TEXTURE;
uniform lowp vec3 tint_color; // RGB color between 0 and 1
uniform lowp float tint_amount; // number between 0 and 1

// function to convert RGB to HSV
highp vec3 rgb2hsv(highp vec3 c)
{
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    /* float e = 1.0e-10; */
    highp float e = 0.0000000001;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// function to convert HSV to RGB
highp vec3 hsv2rgb(highp vec3 c)
{
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
    highp vec4 color = zTextureSpec(SCREEN_TEXTURE, FRAGCOORD.xy * SCREEN_PIXEL_SIZE);

    // convert color to HSV
    highp vec3 hsvTint = rgb2hsv(tint_color);
    highp vec3 hsvColor = rgb2hsv(color.rgb);

    // work out shortest angle
    highp float angleDif = (hsvTint.x - hsvColor.x);

    // apply tint color hue
    if (hsvTint.y != 0.0 && hsvTint.z != 0.0)
    {
        hsvColor.x = hsvColor.x + (angleDif * tint_amount);
    }

    // modify saturation based on tint color value
    hsvColor.y = mix(hsvColor.y, hsvTint.y, tint_amount);
    highp float mixValue = (mix(hsvColor.z, hsvTint.z, tint_amount));
    hsvColor.z = (mixValue <= hsvColor.z) ? mixValue : hsvColor.z;

    // convert back to RGB
    color.rgb = hsv2rgb(hsvColor);

    COLOR = color;
}
