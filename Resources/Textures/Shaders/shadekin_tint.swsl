uniform sampler2D SCREEN_TEXTURE;
uniform highp vec3 tintColor;

void fragment() {
    highp vec4 color = zTextureSpec(SCREEN_TEXTURE, UV);

    highp vec3 hsv = rgb2hsv(color.rgb);
    hsv.x += rgb2hsv(tintColor).x;
    hsv.x = mod(hsv.x, 1.0);
    color.rgb = hsv2rgb(hsv);

    COLOR = color;
}

// uniform sampler2D SCREEN_TEXTURE;
// uniform mediump float tintIntensity;
// uniform mediump vec3 tintColor;

// void fragment() {
//     highp vec4 color = zTextureSpec(SCREEN_TEXTURE, UV);

//     // Convert to HSV
//     highp vec3 hsv = rgb2hsv(color.rgb);

//     // Apply tint
//     hsv += tintColor;

//     // Convert back to RGB
//     highp vec3 rgb = hsv2rgb(hsv);

//     // Mix original color and tinted color
//     COLOR = mix(color, vec4(rgb, color.a), tintIntensity);
// }

highp vec3 rgb2hsv(highp vec3 c)
{
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    /* float e = 1.0e-10; */
    highp float e = 0.0000000001;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

highp vec3 hsv2rgb(highp vec3 c)
{
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
